.TH "pyrst.pyrst.client.BirstClient" 3 "Fri Feb 20 2015" "Version 0.50" "Pyrst" \" -*- nroff -*-
.ad l
.nh
.SH NAME
pyrst.pyrst.client.BirstClient \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits object\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "def \fB__init__\fP"
.br
.ti -1c
.RI "def \fB__repr__\fP (self)"
.br
.ti -1c
.RI "def \fBlogin\fP (self)"
.br
.RI "\fILOGIN AND LOGOUT #\&. \fP"
.ti -1c
.RI "def \fBlogout\fP (self)"
.br
.ti -1c
.RI "def \fBexecutequery\fP"
.br
.RI "\fIQUERYING #\&. \fP"
.ti -1c
.RI "def \fBretrieve\fP"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBpassword\fP"
.br
.ti -1c
.RI "\fBuser\fP"
.br
.ti -1c
.RI "\fBinstance\fP"
.br
.ti -1c
.RI "\fBtoken\fP"
.br
.ti -1c
.RI "\fBconnector\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
.nf
Basic Birst client object.

.fi
.PP
 
.SH "Member Function Documentation"
.PP 
.SS "def pyrst\&.pyrst\&.client\&.BirstClient\&.executequery ( self,  space,  query,  handler = \fCNone\fP)"

.PP
QUERYING #\&. The query interface exposes three methods:
.IP "\(bu" 2
executequery: simple querying
.IP "\(bu" 2
more: continue querying
.IP "\(bu" 2
retrieve: keep querying as long as there are results\&.
.PP
.PP
Unlike in Birst's XML API, in Pyrst, the space comes \fIbefore\fP the query - this is much more intuitive since the query is subordinate to the space rather than the other way around\&. 
.PP
.nf
Retrieves the first 1,000 results for the query.

:param space: SpaceID of the space (incl. hyphens, 36 chars)
:param query: Birst BQL query
:param handler: instance of output handler class
:return: query result

.fi
.PP
 
.SS "def pyrst\&.pyrst\&.client\&.BirstClient\&.login ( self)"

.PP
LOGIN AND LOGOUT #\&. The login API exposes two (fairly selfexplanatory) methods:
.IP "\(bu" 2
login
.IP "\(bu" 2
logout
.PP
.PP
There is no manual token handling in Pyrst - upon login, your token will be appended to the instance as an instance variable\&. 
.PP
.nf
Logs the user in to the instance specified in the basic settings of the
class with the password and username specified.
If successful, the token returned will be appended to the class instance
as an instance variable.

.fi
.PP
 
.SS "def pyrst\&.pyrst\&.client\&.BirstClient\&.logout ( self)"

.PP
.nf
Logs the user out and deletes the token saved in the instance.

.fi
.PP
 
.SS "def pyrst\&.pyrst\&.client\&.BirstClient\&.retrieve ( self,  space,  query,  handler = \fCNone\fP)"

.PP
.nf
Retrieves the entire dataset for the query.

:param space: SpaceID of the space (incl. hyphens, 36 chars)
:param query: Birst BQL query
:param handler: instance of output handler class
:return: query result

.fi
.PP
 

.SH "Author"
.PP 
Generated automatically by Doxygen for Pyrst from the source code\&.
